git commit -h 
git help commit

#the directory where this is run will be initated as a master repository
git init 
 
#will add file to repository(stage), it is all use to pull in new changes to modified files to stagging area .For every new change made, a git add is needed
git add <file>

# will commit all staged changes made so far to the repository. -a option too directly commit changes without having to stage them with git add.
git commit -m <"comments">
git commit -a -m  <"comments">

# provides info on staged, modified and uncommited and changes made since last commit
git status 

#.gitignore can list all files that you never want to stage/commit

#The command compares what is in your working directory with what is in your staging area. it shows changes you’ve made that you haven’t yet staged.
git diff

#shows changes since your last commit & the stagging area
git diff --staged

#to view difference in a GUI
git difftool

#to undo the changes made to a file in the stagging area (i.e after git add, before git commit)
git restore --staged <file>

#to discard changes in the working directory
git restore <file>

#restore the changes to a file that were last committed from git to working directory
git restore --worktree <file>

# to remove a file from staging area but keep in working directory and still not have it tracked
git rm --cached <file>

#git log --pretty=oneline
#git log
#git log --stat
#git log --oneline --decorate #shows you where the branch pointers are pointing


# cloning a remote directory. it will create a repository under your current working directory
 git clone https://github.com/vtonse/My_notes
 cd My_notes
 git remote # gives the shortname of the handle
 
 #sshows you the URLs that Git has stored for the shortname to be used when reading and writing to that remote:
 git remote -v 
 
 #shows the remote URL's that re being tracked and which branch from local will directly merge into remote
 git remote show origin
 
 # to get data from your remote projects, command only downloads the data to your local repository.it doesn’t automatically merge it with any of your work or modify what you’re currently working on
 git fetch origin
 
 #generally fetches data from the server you originally cloned from and automatically tries to merge it into the code you’re currently working on. -f forces the overwrite -commit (perform commit if merge succeeds
 git pull -all -f --show-forced-updates
 
 
 
 #create a branch. After creating a branch, you need to switch to branch using checkout
 git branch <branchname>
 
 
 #do a checkout to switch to a respective branch under a master or to switch back to master. HEAD moves to this and replaces the 
 contents of the working directory. So commit everything before doing a checkout
 git checkout <branchname>
 git checkout -b <branchname> # to create a new branch and switch to it
 
 git push origin
 #list existing tags
 git tag
 git tag -l "v1.8.5*"
 #lightweight tag is a pointer to a specific commit

#annotated tag
 git tag -a v1.4 -m "my version 1.4"
 git show ver1.4
 
#lightweight tag (dont use -a and -m while creating the tag)
git tag v1.4-1w

#pushes both lightweight and annotated tags
git push origin --tags
#pushes only annotated tags
git push <remote> --follow-tags

#delete tag on local
git tag -d <tagname>

#delete tag on remote- 2ways
git push <remote> :refs/tags/<tagname>

git push <remote> --delete <tagname>

# checking out the files using a tag, puts the HEAD in a detached state. Any commits made now will only be accessible
#using the exact commit name and will not change the tag. So it is better to checkout a tag under a separate branch
# if the intention is to make a fix on an older version. In case you commit and then switch to a diff branch. you can still move the changes to a new branch using  git branch <new-branch-name> <commit checksum>

git checkout <tagname>
git checkout -b <branchname> <tagname> # to checkout tag to a different branch

Additional git test
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 